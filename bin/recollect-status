#!/usr/bin/perl
use FindBin;
use lib "$FindBin::Bin/../lib";

die "NEEDS REWRITING";
use Recollect::Model;
use Getopt::Long;

my $base_path = "$FindBin::Bin/..";
my $verbose;
my $reminder;
my $summary;
GetOptions(
    'base-path=s' => \$base_path,
    'v|verbose'   => \$verbose,
    'reminder=s'  => \$reminder,
    's|summary'   => \$summary,
) or die "USAGE: $0 --base-path=foo";

my $model = Recollect::Model->new(
    base_path => $base_path,
);

if ($reminder) {
    my $r = $model->reminders->by_id($reminder);
    die "Could not find reminder '$reminder'\n" unless $r;
    print $r->dump;
    exit;
}

my $reminders = $model->reminders->all;
print "Reminders: " . @$reminders . "\n";
my @confirmed;
my @unconfirmed;
for my $r (@$reminders) {
    if ($r->{confirmed}) {
        push @confirmed, $r;
    }
    else {
        push @unconfirmed, $r;
    }
}

my $un_count = @unconfirmed;
print "Unconfirmed reminders: ($un_count)\n";
unless ($summary) {
    for my $r (@unconfirmed) {
        my $date = DateTime->from_epoch(epoch => $r->{created_at});
        $date->set_time_zone('America/Vancouver');
        print "  $r->{id} $r->{zone}\t- $r->{email} ($r->{target}) created: " 
            . $date->ymd . " " . $date->hms . "\n";
        if ($verbose) {
            print "   offset=$r->{offset} id=$r->{id} hash=$r->{hash}\n";
        }
    }
}

my $count = @confirmed;
print "\nConfirmed reminders: ($count)\n";
unless ($summary) {
    for my $r (@confirmed) {
        my $last = DateTime->from_epoch(epoch => $r->{last_notified});
        $last->set_time_zone('America/Vancouver');
        $last = join(' ', $last->ymd, $last->hms);
        my $next = DateTime->from_epoch(epoch => $r->{next_pickup});
        $next->set_time_zone('America/Vancouver');
        $next = join(' ', $next->ymd, $next->hms);
        print " $r->{zone}\t- $r->{email} ($r->{target}) last_notified: $last - next_pickup: $next"
            . "\n";
        if ($verbose) {
            print "   offset=$r->{offset} id=$r->{id}\n";
        }
    }
}
