#!/usr/bin/perl
use strict;
use warnings;
use Lazy::Lockfile;
use FindBin;
use lib "$FindBin::Bin/../lib";

my $lockfile = "/var/www/recollect/run/send-reminders.lock";
my $lock = Lazy::Lockfile->new($lockfile) || die "no lock";

require Recollect::Notifier;
require Recollect::Reminder;
require DateTime;
require DateTime::Format::Pg;
require Getopt::Long;

my %args;
Getopt::Long::GetOptions( \%args,
    'dry-run',
    'use-time=s',
    'loop=i',
    'loopdelay=i',
) or usage();

if (my $lifespan = $args{loop}) {
    warn_it("$0 checking $lifespan times with a $args{loopdelay} pause");
    while ($lifespan > 0) {
        check_and_send_reminders();
        $lifespan--;
        sleep $args{loopdelay} if $lifespan;
    }
    warn_it("$0 finished serving $lifespan checks");
}
else {
    check_and_send_reminders();
}

exit;

sub check_and_send_reminders {
    my $notifier = Recollect::Notifier->new;
    if (my $t = $args{'use-time'}) {
        $notifier->now(DateTime::Format::Pg->parse_datetime($t));
    }
    my $reminders = $notifier->need_notification;
    for my $r_id (@$reminders) {
        my $rem = Recollect::Reminder->By_id($r_id);

        if ($args{'dry-run'}) {
            print "Would have notified reminder " . $rem->nice_name . " about "
                . $rem->zone->next_pickup->[0]->day . " \n";
            next;
        }
        eval { $notifier->notify($rem) };
        warn_it($@) if $@;
    }
}

exit;

sub warn_it {
    my $now = localtime;
    warn localtime() . ": @_";
}

sub usage {
    die <<EOT;
USAGE: $0 [--dry-run] [--loop=60] [--loopdelay=60]
EOT
}
